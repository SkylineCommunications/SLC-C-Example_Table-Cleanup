// <auto-generated>This is auto-generated code by DIS. Do not modify.</auto-generated>
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace Skyline.DataMiner.Scripting
{
public static class Parameter
{
	/// <summary>PID: 4 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int amountofrowstoadd_4 = 4;
	/// <summary>PID: 4 | Type: read</summary>
	public const int amountofrowstoadd = 4;
	/// <summary>PID: 100 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int cleanupmethod_100 = 100;
	/// <summary>PID: 100 | Type: read</summary>
	public const int cleanupmethod = 100;
	/// <summary>PID: 102 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int maximumrowage_102 = 102;
	/// <summary>PID: 102 | Type: read</summary>
	public const int maximumrowage = 102;
	/// <summary>PID: 104 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int maximumrowcount_104 = 104;
	/// <summary>PID: 104 | Type: read</summary>
	public const int maximumrowcount = 104;
	public class Write
	{
		/// <summary>PID: 3 | Type: write</summary>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public const int filltrapstable_3 = 3;
		/// <summary>PID: 3 | Type: write</summary>
		public const int filltrapstable = 3;
		/// <summary>PID: 5 | Type: write</summary>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public const int amountofrowstoadd_5 = 5;
		/// <summary>PID: 5 | Type: write</summary>
		public const int amountofrowstoadd = 5;
		/// <summary>PID: 98 | Type: write</summary>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public const int cleanuptrapstable_98 = 98;
		/// <summary>PID: 98 | Type: write</summary>
		public const int cleanuptrapstable = 98;
		/// <summary>PID: 101 | Type: write</summary>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public const int cleanupmethod_101 = 101;
		/// <summary>PID: 101 | Type: write</summary>
		public const int cleanupmethod = 101;
		/// <summary>PID: 103 | Type: write</summary>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public const int maximumrowage_103 = 103;
		/// <summary>PID: 103 | Type: write</summary>
		public const int maximumrowage = 103;
		/// <summary>PID: 105 | Type: write</summary>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public const int maximumrowcount_105 = 105;
		/// <summary>PID: 105 | Type: write</summary>
		public const int maximumrowcount = 105;
	}
	public class Traps
	{
		/// <summary>PID: 200</summary>
		public const int tablePid = 200;
		/// <summary>IDX: 0</summary>
		public const int indexColumn = 0;
		/// <summary>PID: 201</summary>
		public const int indexColumnPid = 201;
		public class Pid
		{
			/// <summary>PID: 201 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int trapsindex_201 = 201;
			/// <summary>PID: 201 | Type: read</summary>
			public const int trapsindex = 201;
			/// <summary>PID: 202 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int trapsdatetime_202 = 202;
			/// <summary>PID: 202 | Type: read</summary>
			public const int trapsdatetime = 202;
			public class Write
			{
			}
		}
		public class Idx
		{
			/// <summary>IDX: 0 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int trapsindex_201 = 0;
			/// <summary>IDX: 0 | Type: read</summary>
			public const int trapsindex = 0;
			/// <summary>IDX: 1 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int trapsdatetime_202 = 1;
			/// <summary>IDX: 1 | Type: read</summary>
			public const int trapsdatetime = 1;
		}
	}
}
public class WriteParameters
{
	/// <summary>PID: 3  | Type: write | DISCREETS: Fill Traps Table = 1</summary>
	public System.Object Filltrapstable {get { return Protocol.GetParameter(3); }set { Protocol.SetParameter(3, value); }}
	/// <summary>PID: 5  | Type: write</summary>
	public System.Object Amountofrowstoadd {get { return Protocol.GetParameter(5); }set { Protocol.SetParameter(5, value); }}
	/// <summary>PID: 98  | Type: write | DISCREETS: Cleanup Traps Table = 1</summary>
	public System.Object Cleanuptrapstable {get { return Protocol.GetParameter(98); }set { Protocol.SetParameter(98, value); }}
	/// <summary>PID: 101  | Type: write | DISCREETS: Row Age and Row Count = 0, Row Age = 1, Row Count = 2</summary>
	public System.Object Cleanupmethod {get { return Protocol.GetParameter(101); }set { Protocol.SetParameter(101, value); }}
	/// <summary>PID: 103  | Type: write</summary>
	public System.Object Maximumrowage {get { return Protocol.GetParameter(103); }set { Protocol.SetParameter(103, value); }}
	/// <summary>PID: 105  | Type: write</summary>
	public System.Object Maximumrowcount {get { return Protocol.GetParameter(105); }set { Protocol.SetParameter(105, value); }}
	public SLProtocolExt Protocol;
	public WriteParameters(SLProtocolExt protocol)
	{
		Protocol = protocol;
	}
}
public interface SLProtocolExt : SLProtocol
{
	/// <summary>PID: 200</summary>
	TrapsQActionTable traps { get; set; }
	object Afterstartup_dummy { get; set; }
	object Filltrapstable_3 { get; set; }
	object Filltrapstable { get; set; }
	object Amountofrowstoadd_4 { get; set; }
	object Amountofrowstoadd { get; set; }
	object Amountofrowstoadd_5 { get; set; }
	object Cleanuptrapstable_98 { get; set; }
	object Cleanuptrapstable { get; set; }
	object Triggerqatablecleanup_dummy { get; set; }
	object Cleanupmethod_100 { get; set; }
	object Cleanupmethod { get; set; }
	object Cleanupmethod_101 { get; set; }
	object Maximumrowage_102 { get; set; }
	object Maximumrowage { get; set; }
	object Maximumrowage_103 { get; set; }
	object Maximumrowcount_104 { get; set; }
	object Maximumrowcount { get; set; }
	object Maximumrowcount_105 { get; set; }
	object Trapsindex_201 { get; set; }
	object Trapsindex { get; set; }
	object Trapsdatetime_202 { get; set; }
	object Trapsdatetime { get; set; }
	WriteParameters Write { get; set; }
}
public class ConcreteSLProtocolExt : ConcreteSLProtocol, SLProtocolExt
{
	/// <summary>PID: 200</summary>
	public TrapsQActionTable traps { get; set; }
	/// <summary>PID: 2  | Type: dummy</summary>
	public System.Object Afterstartup_dummy {get { return GetParameter(2); }set { SetParameter(2, value); }}
	/// <summary>PID: 3  | Type: write | DISCREETS: Fill Traps Table = 1</summary>
	public System.Object Filltrapstable_3 {get { return GetParameter(3); }set { SetParameter(3, value); }}
	/// <summary>PID: 3  | Type: write | DISCREETS: Fill Traps Table = 1</summary>
	public System.Object Filltrapstable {get { return Write.Filltrapstable; }set { Write.Filltrapstable = value; }}
	/// <summary>PID: 4  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Amountofrowstoadd_4 {get { return GetParameter(4); }set { SetParameter(4, value); }}
	/// <summary>PID: 4  | Type: read</summary>
	public System.Object Amountofrowstoadd {get { return GetParameter(4); }set { SetParameter(4, value); }}
	/// <summary>PID: 5  | Type: write</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Amountofrowstoadd_5 {get { return GetParameter(5); }set { SetParameter(5, value); }}
	/// <summary>PID: 98  | Type: write | DISCREETS: Cleanup Traps Table = 1</summary>
	public System.Object Cleanuptrapstable_98 {get { return GetParameter(98); }set { SetParameter(98, value); }}
	/// <summary>PID: 98  | Type: write | DISCREETS: Cleanup Traps Table = 1</summary>
	public System.Object Cleanuptrapstable {get { return Write.Cleanuptrapstable; }set { Write.Cleanuptrapstable = value; }}
	/// <summary>PID: 99  | Type: dummy</summary>
	public System.Object Triggerqatablecleanup_dummy {get { return GetParameter(99); }set { SetParameter(99, value); }}
	/// <summary>PID: 100  | Type: read | DISCREETS: Row Age and Row Count = 0, Row Age = 1, Row Count = 2</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Cleanupmethod_100 {get { return GetParameter(100); }set { SetParameter(100, value); }}
	/// <summary>PID: 100  | Type: read | DISCREETS: Row Age and Row Count = 0, Row Age = 1, Row Count = 2</summary>
	public System.Object Cleanupmethod {get { return GetParameter(100); }set { SetParameter(100, value); }}
	/// <summary>PID: 101  | Type: write | DISCREETS: Row Age and Row Count = 0, Row Age = 1, Row Count = 2</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Cleanupmethod_101 {get { return GetParameter(101); }set { SetParameter(101, value); }}
	/// <summary>PID: 102  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Maximumrowage_102 {get { return GetParameter(102); }set { SetParameter(102, value); }}
	/// <summary>PID: 102  | Type: read</summary>
	public System.Object Maximumrowage {get { return GetParameter(102); }set { SetParameter(102, value); }}
	/// <summary>PID: 103  | Type: write</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Maximumrowage_103 {get { return GetParameter(103); }set { SetParameter(103, value); }}
	/// <summary>PID: 104  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Maximumrowcount_104 {get { return GetParameter(104); }set { SetParameter(104, value); }}
	/// <summary>PID: 104  | Type: read</summary>
	public System.Object Maximumrowcount {get { return GetParameter(104); }set { SetParameter(104, value); }}
	/// <summary>PID: 105  | Type: write</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Maximumrowcount_105 {get { return GetParameter(105); }set { SetParameter(105, value); }}
	/// <summary>PID: 201  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Trapsindex_201 {get { return GetParameter(201); }set { SetParameter(201, value); }}
	/// <summary>PID: 201  | Type: read</summary>
	public System.Object Trapsindex {get { return GetParameter(201); }set { SetParameter(201, value); }}
	/// <summary>PID: 202  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Trapsdatetime_202 {get { return GetParameter(202); }set { SetParameter(202, value); }}
	/// <summary>PID: 202  | Type: read</summary>
	public System.Object Trapsdatetime {get { return GetParameter(202); }set { SetParameter(202, value); }}
	public WriteParameters Write { get; set; }
	public ConcreteSLProtocolExt()
	{
		traps = new TrapsQActionTable(this, 200, "traps");
		Write = new WriteParameters(this);
	}
}
/// <summary>IDX: 0</summary>
public class TrapsQActionTable : QActionTable, IEnumerable<TrapsQActionRow>
{
	public TrapsQActionTable(SLProtocol protocol, int tableId, string tableName) : base(protocol, tableId, tableName) { }
	IEnumerator IEnumerable.GetEnumerator() { return (IEnumerator) GetEnumerator(); }
	public IEnumerator<TrapsQActionRow> GetEnumerator() { return new QActionTableEnumerator<TrapsQActionRow>(this); }
}
/// <summary>IDX: 0</summary>
public class TrapsQActionRow : QActionTableRow
{
	/// <summary>PID: 201 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Trapsindex_201 { get { if (base.Columns.ContainsKey(0)) { return base.Columns[0]; } else { return null; } } set { if (base.Columns.ContainsKey(0)) { base.Columns[0] = value; } else { base.Columns.Add(0, value); } } }
	/// <summary>PID: 201 | Type: read</summary>
	public System.Object Trapsindex { get { if (base.Columns.ContainsKey(0)) { return base.Columns[0]; } else { return null; } } set { if (base.Columns.ContainsKey(0)) { base.Columns[0] = value; } else { base.Columns.Add(0, value); } } }
	/// <summary>PID: 202 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Trapsdatetime_202 { get { if (base.Columns.ContainsKey(1)) { return base.Columns[1]; } else { return null; } } set { if (base.Columns.ContainsKey(1)) { base.Columns[1] = value; } else { base.Columns.Add(1, value); } } }
	/// <summary>PID: 202 | Type: read</summary>
	public System.Object Trapsdatetime { get { if (base.Columns.ContainsKey(1)) { return base.Columns[1]; } else { return null; } } set { if (base.Columns.ContainsKey(1)) { base.Columns[1] = value; } else { base.Columns.Add(1, value); } } }
	public TrapsQActionRow() : base(0, 2) { }
	public TrapsQActionRow(System.Object[] oRow) : base(0, 2, oRow) { }
	public static implicit operator TrapsQActionRow(System.Object[] source) { return new TrapsQActionRow(source); }
	public static implicit operator System.Object[](TrapsQActionRow source) { return source.ToObjectArray(); }
}
}
